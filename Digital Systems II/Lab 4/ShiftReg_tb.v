
//======================================================= 
//  This code is generated by Terasic System Builder 
//======================================================= 
`timescale 1ps/1ps

module ShiftReg_tb;

reg KEY;

wire[9:0] LEDR;

reg[9:0] SW;

reg clk;

ShiftReg SR_DUT(.KEY({KEY,clk}), .LEDR(LEDR), .SW(SW));



initial begin
clk = 0;
// Each section modulates the KEY1 to shift the registers 16 or 26 times and print each state on the positive clock edge
$display("Case: 00_0000_0000");
	#10;
    KEY = 1;
	#10;
    SW[9:0] = 10'b0000000000;
	#10;
    KEY = 0;
	#10;
    KEY = 1;
	#10;
    repeat (16) begin 
	@(posedge clk)
	#10;
	$display("%d %d %d %d %d %d %d %d %d %d", LEDR[9], LEDR[8], LEDR[7], LEDR[6], LEDR[5], LEDR[4], LEDR[3], LEDR[2], LEDR[1], LEDR[0]);
	end
$display("Case: 11_1111_1111");
	#10;
    KEY = 1;
	#10;
    SW[9:0] = 10'b1111111111;
	#10;
    KEY = 0;
	#10;
    KEY = 1;
	#10;
    repeat (16) begin 
	@(posedge clk)
	#10;
	$display("%d %d %d %d %d %d %d %d %d %d", LEDR[9], LEDR[8], LEDR[7], LEDR[6], LEDR[5], LEDR[4], LEDR[3], LEDR[2], LEDR[1], LEDR[0]);
	end
$display("Case: 10_1010_1010");
	#10;
    KEY = 1;
	#10;
    SW[9:0] = 10'b1010101010;
	#10;
    KEY = 0;
	#10;
    KEY = 1;
	#10;
    repeat (26) begin 
	@(posedge clk)
	#10;
	$display("%d %d %d %d %d %d %d %d %d %d", LEDR[9], LEDR[8], LEDR[7], LEDR[6], LEDR[5], LEDR[4], LEDR[3], LEDR[2], LEDR[1], LEDR[0]);
	end
end

// This always block creates an inverting clock pulse of #20 time delay
always 
begin
	clk = #20 ~clk;
end
	
endmodule